xopen("$(NEURONHOME)/lib/hoc/noload.hoc") // standard run tools
xopen("tabchannels.hoc")
nrncontrolmenu()

load_file("MC_def.hoc") 
load_file("PG_def.hoc")
load_file("GC_def.hoc")  
load_file("mathslib.hoc")  

objref f1
f1 = new File()

strdef filepath, filepath1, string, filename, WD


v_init  = -70    // to match pas 
tstop   = 3000   // simulation time
celsius = 35

dt = 0.2       // simulation step

steps_per_ms = 5  // For graphic display: 5 data points per ms
secondorder  = 2  // Crank-Nicholson integration method




m=3
p=0
g=2

//Simulation of ACh effect (Not used in the current model)
NICOTIN  = 0  // 0: No effect
MUSCARIN = 0  // 0: No effect

if (NICOTIN == 0) { 
    gnic_MC = 0.0e-3  // mS/cm2
    gnic_PG = 0.0e-3  
   } else {
    gnic_MC = 1.0e-3  // mS/cm2
    gnic_PG = 8.0e-3  //  
   }

  
objref mit[m], gran[g]
// MC
for i = 0, m-1 {
    mit[i] = new Mitral(gnic_MC)
}
/*
// PG
for i = 0, p-1 {
    pg[i] = new PGcell(gnic_PG)
}
*/
// GC
for i = 0, g-1 {
    gran[i] = new Granule(MUSCARIN)
}

//Parameters

// Synaptic weights
Wm2p = 3.5   // MC to PG   
Wm2g = 3.5 // MC to GC    

Wp2m = 4         // PG to MC      
Wg2m = 2  // GC to MC  

// Peak conductance
AMPAgmaxPG  =  2e-3    //  Peak conductance for MC-PG 
NMDAgmaxPG  =  1e-3    //  Peak conductance for MC-PG
GABAAgmaxPG =  2e-3    //  Peak  conductance for PG-MC

AMPAgmaxGC  =  2e-3    //  Peak conductance for MC-GC
NMDAgmaxGC  =  1e-3    //  Peak conductance for MC-GC
GABAAgmaxGC =  2e-3    //  Peak  conductance for GC-MC

GAMPA =  30e-3  // 30 nS, summed peak conductance for MC-GC
GNMDA =  15e-3  // 15 nS, summed peak conductance for MC-GC 
Ggaba =  60e-3  // 60 nS, summed peak conductance for GC-MC

//Synaptic time constants
tau1_AMPA  = 1       // AMPA rise time constant
tau2_AMPA  = 5.5     // AMPA decay time constant

tau1_NMDA  = 52      // NMDA rise time constanttz
tau2_NMDA  = 343     // NMDA decay time constant

tau1_GABA_PG = 1.25    // GABA rise time constant (PG-MC) 
tau2_GABA_PG = 18      // GABA decay time constant (PG-MC)  

tau1_GABA_GC = 1.25      // GABA rise time constant (GC-MC) 
tau2_GABA_GC = 18        // GABA decay time constant (GC-MC) 

AMPAalpha  = 1/tau1_AMPA      
AMPAbeta   = 1/tau2_AMPA
NMDAalpha  = 1/tau1_NMDA
NMDAbeta   = 1/tau2_NMDA

GABAAalpha_PG = 1/tau1_GABA_PG
GABAAbeta_PG  = 1/tau2_GABA_PG

GABAAalpha_GC = 1/tau1_GABA_GC
GABAAbeta_GC  = 1/tau2_GABA_GC

// Reserval potentials
AMPArev = 0
NMDArev = 0
GABAArev = -80

// Synaptic activation threshold
AMPAact  = 0     
NMDAact  = 0     
GABAAact = -40   

// Synaptic gradeness
AMPAsigma  = 0.2     
NMDAsigma  = 0.2     
GABAAsigma = 2
/*
//Connection between MC and PG
objref m2pAMPA[p], m2pNMDA[p], p2m[m]

for i=0, m-1 {
  for j = 0, p-1 {
    // AMPA synapses
    AMPAgmax = Wm2p*AMPAgmaxPG
    pg[j].gemmbody m2pAMPA[j] = new gradAMPA(0.5)	
    setpointer    m2pAMPA[j].vpre, mit[i].tuft.v(0.5) 
    m2pAMPA[j].gmax  = AMPAgmax  
    m2pAMPA[j].alpha = AMPAalpha 
    m2pAMPA[j].beta  = AMPAbeta  	
    m2pAMPA[j].thetasyn = AMPAact
    m2pAMPA[j].sigma = AMPAsigma
    m2pAMPA[j].e = AMPArev 
    
    // NMDA synapses
    NMDAgmax = Wm2p*NMDAgmaxPG 
    pg[j].gemmbody m2pNMDA[j] = new gradNMDA(0.5)	
    setpointer    m2pNMDA[j].vpre, mit[i].tuft.v(0.5) 
    m2pNMDA[j].gmax  = NMDAgmax  
    m2pNMDA[j].alpha = NMDAalpha 
    m2pNMDA[j].beta  = NMDAbeta  	
    m2pNMDA[j].thetasyn = NMDAact
    m2pNMDA[j].sigma = NMDAsigma
    m2pNMDA[j].e = NMDArev 	
	
   // GABAA synapses
    GABAAgmax = Wp2m*GABAAgmaxPG
    mit[i].tuft p2m[i] = new gradGABA(0.5)	
    setpointer     p2m[i].vpre, pg[j].gemmbody.v(0.5) 
    p2m[i].gmax  = GABAAgmax  
    p2m[i].alpha = GABAAalpha_PG 
    p2m[i].beta  = GABAAbeta_PG  	
    p2m[i].thetasyn = GABAAact
    p2m[i].sigma = GABAAsigma
    p2m[i].e = GABAArev 
    
    }
  }
*/
//Connection between MC and GC
objref m2gAMPA[g], m2gNMDA[g], g2m[m]

for i=0, m-2 {
  for j = 0, g-2{
      // AMPA synapses
      // AMPAgmax  = (we*gAMPA)/ng    // ~2 ns
      AMPAgmax = Wm2g*AMPAgmaxGC
      gran[j].gemmbody m2gAMPA[j] = new gradAMPA(0.5)	
      setpointer          m2gAMPA[j].vpre, mit[i].dend.v(0.5) 
      m2gAMPA[j].gmax  = AMPAgmax  
      m2gAMPA[j].alpha = AMPAalpha 
      m2gAMPA[j].beta  = AMPAbeta  	
      m2gAMPA[j].thetasyn = AMPAact
      m2gAMPA[j].sigma = AMPAsigma
      m2gAMPA[j].e = AMPArev
	
      // NMDA synapses
      // NMDAgmax  = (we*gNMDA)/ng    // ~1 ns
      NMDAgmax = Wm2g*NMDAgmaxGC       
      gran[j].gemmbody m2gNMDA[j] = new gradNMDA(0.5)	
      setpointer          m2gNMDA[j].vpre, mit[i].dend.v(0.5) 
      m2gNMDA[j].gmax  = NMDAgmax   
      m2gNMDA[j].alpha = NMDAalpha
      m2gNMDA[j].beta  = NMDAbeta	
      m2gNMDA[j].thetasyn = NMDAact
      m2gNMDA[j].sigma = NMDAsigma
      m2gNMDA[j].e = NMDArev	
		
      // graded inhibtion
      // GABAAgmax = (wi*ggaba)/nm    // ~2 ns
      GABAAgmax = Wg2m*GABAAgmaxGC
      mit[i].dend g2m[i] = new gradGABA(0.5)	
      setpointer     g2m[i].vpre, gran[j].gemmbody.v(0.5)
      g2m[i].gmax  = GABAAgmax   
      g2m[i].alpha = GABAAalpha_GC
      g2m[i].beta  = GABAAbeta_GC
      g2m[i].thetasyn = GABAAact
      g2m[i].sigma = GABAAsigma
      g2m[i].e = GABAArev

    }
  }

for i= m-2, m-1 {
  for j = g-1,g-1 {
      // AMPA synapses
      // AMPAgmax  = (we*gAMPA)/ng    // ~2 ns
      AMPAgmax = Wm2g*AMPAgmaxGC
      gran[j].gemmbody m2gAMPA[j] = new gradAMPA(0.5)	
      setpointer          m2gAMPA[j].vpre, mit[i].dend.v(0.5) 
      m2gAMPA[j].gmax  = AMPAgmax  
      m2gAMPA[j].alpha = AMPAalpha 
      m2gAMPA[j].beta  = AMPAbeta  	
      m2gAMPA[j].thetasyn = AMPAact
      m2gAMPA[j].sigma = AMPAsigma
      m2gAMPA[j].e = AMPArev
	
      // NMDA synapses
      // NMDAgmax  = (we*gNMDA)/ng    // ~1 ns
      NMDAgmax = Wm2g*NMDAgmaxGC       
      gran[j].gemmbody m2gNMDA[j] = new gradNMDA(0.5)	
      setpointer          m2gNMDA[j].vpre, mit[i].dend.v(0.5) 
      m2gNMDA[j].gmax  = NMDAgmax   
      m2gNMDA[j].alpha = NMDAalpha
      m2gNMDA[j].beta  = NMDAbeta	
      m2gNMDA[j].thetasyn = NMDAact
      m2gNMDA[j].sigma = NMDAsigma
      m2gNMDA[j].e = NMDArev	
		
      // graded inhibtion
      // GABAAgmax = (wi*ggaba)/nm    // ~2 ns
      GABAAgmax = Wg2m*GABAAgmaxGC
      mit[i].dend g2m[i] = new gradGABA(0.5)	
      setpointer     g2m[i].vpre, gran[j].gemmbody.v(0.5)
      g2m[i].gmax  = GABAAgmax   
      g2m[i].alpha = GABAAalpha_GC
      g2m[i].beta  = GABAAbeta_GC
      g2m[i].thetasyn = GABAAact
      g2m[i].sigma = GABAAsigma
      g2m[i].e = GABAArev

    }
  }


//stimulation

// Current injection
T1  = 200     
Dur = 4000
Ic1 = 1.5 

T2  = 210     
Dur = 4000
Ic2 = 1.5


T3  = 220     
Dur = 4000
Ic3 = 1.5


objref Stim1,Stim2,Stim3
mit[0].soma Stim1 = new IClamp(0.5)
Stim1.del = T1
Stim1.dur = Dur		
Stim1.amp = Ic1 
 
mit[1].soma Stim2 = new IClamp(0.5)
Stim2.del = T2
Stim2.dur = Dur		
Stim2.amp = Ic2 

mit[2].soma Stim3 = new IClamp(0.5)
Stim3.del = T3
Stim3.dur = Dur		
Stim3.amp = Ic3 


//graphs

objref gm1, gm2, gm3, gm4, gm5, gg1,gg2,gg3,gg4,gg5,gg6

// Voltage plot
proc Fig_MC()  {
gm1 = new Graph(0)
addplot(gm1, 0)
gm1.size(0,tstop,-70,60)
gm1.view(0,-80,tstop,140, 0,400,500,200)
gm1.addvar("Mit[0].soma", "mit[0].soma.v(0.5)", 1, 1, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue
//gm1.addvar("Mit[1].soma", "mit[1].soma.v(0.5)", 2, 1, 0.8, 0.9, 2)  
// gm1.addvar("Mit[2].soma", "mit[2].soma.v(0.5)", 3, 1, 0.8, 0.9, 2)  



gm2 = new Graph(0)
addplot(gm2, 0)
gm2.size(0,tstop,-70,60)
gm2.view(0,-80,tstop,140, 500,150,500,200)
gm2.addvar("Mit[0].dend", "mit[0].dend.v(0.5)", 1, 1, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue
gm2.addvar("Mit[1].dend", "mit[1].dend.v(0.5)", 2, 1, 0.8, 0.9, 2)  
// gm2.addvar("Mit[2].dend", "mit[2].dend.v(0.5)", 3, 1, 0.8, 0.9, 2) 

gm3 = new Graph(0)
addplot(gm3, 0)
gm3.size(0,tstop,-70,60)
gm3.view(0,-80,tstop,140, 900,150,500,200)
gm3.addvar("Mit[0].tuft", "mit[0].tuft.v(0.5)", 1, 1, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue
gm3.addvar("Mit[1].tuft", "mit[1].tuft.v(0.5)", 2, 1, 0.8, 0.9, 2)  
gm3.addvar("Mit[2].tuft", "mit[2].tuft.v(0.5)", 3, 1, 0.8, 0.9, 2) 

gm4 = new Graph(0)
addplot(gm4, 0)
gm4.size(0,tstop,0,1)
gm4.view(0,0,tstop,1, 0,150,400,150)
gm4.addvar("Ks Activation.mit[0]", "mit[0].soma.m_IKs", 2, 1, 0.9, 0.9, 2)  
gm4.addvar("Ks Inactivation.mit[0]", "mit[0].soma.h_IKs", 1, 1, 0.9, 0.9, 2)
gm4.addvar("Ks Activation.mit[1]", "mit[1].soma.m_IKs", 4, 1, 0.9, 0.9, 2)  
gm4.addvar("Ks Inactivation.mit[1]", "mit[1].soma.h_IKs", 3, 1, 0.9, 0.9, 2)
gm4.addvar("Ks Activation.mit[2]", "mit[2].soma.m_IKs", 7, 1, 0.9, 0.9, 2)  
gm4.addvar("Ks Inactivation.mit[2]", "mit[2].soma.h_IKs", 5, 1, 0.9, 0.9, 2)


gm5 = new Graph(0)
addplot(gm5, 0)
gm5.size(0,tstop,0,0.0001)
gm5.view(0,0,tstop,0.001, 0,420,400,150)
gm5.addvar("Cai.mit[0]", "mit[0].soma.cai", 2, 1, 0.9, 0.9, 2)
gm5.addvar("Cai.mit[0]", "mit[1].soma.cai", 1, 1, 0.9, 0.9, 2)
gm5.addvar("Cai.mit[0]", "mit[2].soma.cai", 3, 1, 0.9, 0.9, 2)
/*
gm6 = new Graph(0)
addplot(gm6, 0)
gm6.size(0,tstop,-0.0005,0.0005)
gm6.view(0,-0.005,tstop,0.01, 450,200,400,150)
gm6.addvar("IKCa", "mit[0].soma.ik_IKCa", 1, 1, 0.9, 0.9, 2)  //1: black; 2: red; 3: blue
*/



/*
gm4 = new Graph(0)
addplot(gm4, 0)
gm3.size(0,tstop,0,2)
gm3.view(0,0,tstop,2, 0,480,500,200)
gm3.addvar("g2m[0].g", 1, 2, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue  g2m[3][28]
//g3.addvar("mit.GABAA.g", 1, 2, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue


gm5 = new Graph(0)
addplot(gm5, 0)
gm4.size(0,tstop,0,2)
gm4.view(0,0,tstop,25, 0,830,500,200)
gm4.addvar("mit[0].GABAA.i", 2, 2, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue
*/


}

proc Fig_GC()  {
gg1 = new Graph(0)
addplot(gg1, 0)
gg1.size(0,tstop,-70,60)
gg1.view(0,-80,tstop,120, 0,830,500,200)
gg1.addvar("Gran[0].soma", "gran[0].soma.v(0.5)", 1, 1, 0.8, 0.9, 2)  
gg1.addvar("Gran[1].soma", "gran[1].soma.v(0.5)", 2, 1, 0.8, 0.9, 2)  


gg2 = new Graph(0)
addplot(gg2, 0)
gg2.size(0,tstop,-70,60)
gg2.view(0,-80,tstop,120, 500,830,500,200)
gg2.addvar("Gran[0].gemmbody", "gran[0].dend.v(0.5)", 1, 1, 0.8, 0.9, 2)  
gg2.addvar("Gran[1].gemmbody", "gran[1].dend.v(0.5)", 2, 1, 0.8, 0.9, 2)  

gg3 = new Graph(0)
addplot(gg3, 0)
gg3.size(0,tstop,0,1)
gg3.view(0,0,tstop,1, 0,900,500,150)
gg3.addvar("IA.gran0.m", "gran[0].dend.m_kamt", 5, 2, 0.8, 0.9, 2) 
gg3.addvar("IA.gran0.h", "gran[0].dend.h_kamt", 1, 2, 0.8, 0.9, 2)  
gg3.addvar("IA.gran1.m", "gran[1].dend.m_kamt", 2, 2, 0.8, 0.9, 2) 
gg3.addvar("IA.gran1.h", "gran[1].dend.h_kamt", 3, 2, 0.8, 0.9, 2)  

gg4 = new Graph(0)
addplot(gg4, 0)
gg4.size(0,tstop,-0.05,0.1)
gg4.view(0,-0.05,tstop,0.1, 0,900,500,130)
gg4.addvar("IA.gran0", "gran[0].dend.ik_kamt", 3, 2, 0.8, 0.9, 2)  
gg4.addvar("IA.gran1", "gran[1].dend.ik_kamt", 1, 2, 0.8, 0.9, 2)  

gg5 = new Graph(0)
addplot(gg5, 0)
gg5.size(0,tstop,0,1)
gg5.view(0,0,tstop,1, 0,900,500,150)
gg5.addvar("Ican.gran0.m", "gran[0].dend.m_Ican", 5, 2, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue
gg5.addvar("Ican.gran1.m", "gran[1].dend.m_Ican", 2, 2, 0.8, 0.9, 2)  //1: black; 2: red; 3: blue

gg6 = new Graph(0)
addplot(gg6, 0)
gg6.size(0,tstop,0,2)
gg6.view(0,0,tstop,2, 0,450,500,130)
gg6.addvar("Soma.gran0.Ca", "gran[0].soma.cai", 1, 2, 0.8, 0.9, 2)  
gg6.addvar("Soma.gran1.Ca", "gran[1].soma.cai", 2, 2, 0.8, 0.9, 2)  
}

/*
proc Fig_PG()  {
g7 = new Graph(0)
addplot(g7, 0)
g7.size(0,tstop,-70,60)
g7.view(0,-80,tstop,120, 0,500,500,200)
g7.addvar("pg[0].soma", "pg[0].soma.v(0.5)", 2, 1, 0.8, 0.9, 2)  

g8 = new Graph(0)
addplot(g8, 0)
g8.size(0,tstop,-70,60)
g8.view(0,-80,tstop,120, 500,500,500,200)
g8.addvar("pg[0].gemmbody", "pg[0].dend.v(0.5)", 2, 1, 0.8, 0.9, 2)  
}
*/


/*
Fig_MC() 
Fig_GC()
// Fig_PG()
run()


/////////////////////////////////////////////////////////// save data ///////////////////////////////////////////////////////////////////
DT  = 0.2       // Record data with a resolution of 0.2 ms
DTT =  0.002      // Record data with a resolution of 0.002 ms

objref Ttt,time

Ttt = new Vector()
time   = new Vector()


// Record time	
Ttt.record(&t, DTT)  
time.record(&t, DT)


proc save_data() {
   WD = getcwd()
   
   sprint(filepath, "data%d",$1)
   print filepath
   print "\n"
   
   FL=chdir(filepath)
   
   if (FL==-1) {
    sprint(string, "system(\"mkdir %s\")", filepath)
    //chdir("getcwd()")
    chdir(WD)
	execute(string)
    } else {
    chdir(WD)
   }
   
print "\nboooooooooooooooooo1\n"

////////////////////////////////////// simulation time /////////////////////////////////

    sprint(filename, "%s/ttt", filepath)
    f1.wopen(filename)
    time.printf(f1)
    f1.close()

    sprint(filename, "%s/Ttt", filepath)
    f1.wopen(filename)
    Ttt.printf(f1)
    f1.close()

////////////////////////////////////// SPIKE TIMING/////////////////////////////////////

// Save MC dendritic spike time	
  for i=0, m-1 {
    	
    sprint(filename, "%s/Ms_%d",filepath, i)
	f1.wopen(filename)
	mit[i].spiketimes.printf(f1)
	f1.close()
   
  }   
  
 // Save MC dendritic spike time	
  for i=0, m-1 {
    	
    sprint(filename, "%s/Md_%d",filepath, i)
	f1.wopen(filename)
	mit[i].dendspike.printf(f1)
	f1.close()
   
  }   
 
 
  // Save GC somatic spike time	
  for i=0, g-1 {
     
      sprint(filename, "%s/Gs_%d",filepath, i)
	  f1.wopen(filename)
	  gran[i].spiketimes.printf(f1)
	  f1.close()
   
  }
  
  // Save GC dendritic spike time	
  for i=0, g-1 {
     
      sprint(filename, "%s/Gd_%d",filepath, i)
	  f1.wopen(filename)
	  gran[i].dendspike.printf(f1)
	  f1.close()
   
  }  
}
/*
print "\nboooooooooooooooooo4\n"
save_data(2)
*/
































